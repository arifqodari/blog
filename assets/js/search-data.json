{
  
    
        "post0": {
            "title": "Recreate Visualization in Matplotlib",
            "content": "Last week I watched an interesting video about recreating a D3.js chart using R ggplot. This is the original chart made using D3.js and this is the recreated chart using ggplot. . In this post, I&#39;ll go through step by step to recreate the same chart, but using Matplotlib. . Setup . import pandas as pd import matplotlib.pyplot as plt import requests import sys from pprint import pprint plt.style.use(&quot;seaborn-notebook&quot;) pd.options.display.max_rows = 15 . We need requests library to download the dataset. . Also, below are some utility functions to make our life easier when doing data wrangling. . ######################### # some utility functions ######################### class Head(object): def __init__(self, lines, fd=sys.stdout): self.lines = lines self.fd = fd def write(self, msg): if self.lines &lt;= 0: return n = msg.count(&quot; n&quot;) if n &lt; self.lines: self.lines -= n return self.fd.write(msg) ix = 0 while(self.lines &gt; 0): iy = msg.find(&#39; n&#39;, ix + 1) self.lines -= 1 ix = iy return self.fd.write(msg[:ix]) def pprint_head(to_print, length=10): &quot;&quot;&quot; Print first few lines of the text &quot;&quot;&quot; pprint(to_print, stream=Head(length)) def glimpse(df, rows=10, info=False): &quot;&quot;&quot; Display the first few rows (n) of the given dataframe If info=True, then display the result of dataframe.info() instead &quot;&quot;&quot; if info: display(df.info()) else: display(df.head(rows)) return df . Dataset . Download the Raw Data . The raw data is in json format and can be downloaded from here. . data_url = &quot;https://bl.ocks.org/susielu/raw/625aa4814098671290a8c6bb88a6301e/yearNetwork.json&quot; data_json = requests.get(data_url).json() pprint_head(data_json, 10) # only print first 10 lines . {&#39;networkLines&#39;: [{&#39;line&#39;: [{&#39;value&#39;: 26, &#39;year&#39;: &#39;2013&#39;}, {&#39;value&#39;: 26, &#39;year&#39;: &#39;2014&#39;}, {&#39;value&#39;: 24, &#39;year&#39;: &#39;2015&#39;}, {&#39;value&#39;: 24, &#39;year&#39;: &#39;2016&#39;}, {&#39;value&#39;: 13, &#39;year&#39;: &#39;2017&#39;}], &#39;max&#39;: 26, &#39;network&#39;: &#39;AMC&#39;, &#39;total&#39;: 113}, {&#39;line&#39;: [{&#39;value&#39;: 32, &#39;year&#39;: &#39;2013&#39;}, {&#39;value&#39;: 24, &#39;year&#39;: &#39;2014&#39;}, . Convert json into DataFrame . Once we get the json data, we will convert the data into a dataframe. To do that, we use json_normalize function in pandas that will normalize a json (or dict) into a flat dataframe. At the end of the pipeline, we specify data type for each column to make sure that they have the correct data type. . Tips . Use .pipe(glimpse, info=True) to see data types for each column without leaving the current pipeline . df = ( # convert json into tabular # ref: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html?highlight=json_normalize#normalization pd.json_normalize(data_json[&quot;networkLines&quot;], &quot;line&quot;, [&quot;network&quot;, &quot;total&quot;, &quot;max&quot;]) # .pipe(glimpse, info=True) # specify data type for numeric variables .astype({&quot;year&quot;: &quot;int&quot;, &quot;value&quot;: &quot;int&quot;, &quot;total&quot;: &quot;int&quot;, &quot;max&quot;: &quot;int&quot;}) ) df . year value network total max . 0 2013 | 26 | AMC | 113 | 26 | . 1 2014 | 26 | AMC | 113 | 26 | . 2 2015 | 24 | AMC | 113 | 26 | . 3 2016 | 24 | AMC | 113 | 26 | . 4 2017 | 13 | AMC | 113 | 26 | . ... ... | ... | ... | ... | ... | . 54 2015 | 12 | Amazon | 44 | 16 | . 55 2016 | 16 | Amazon | 44 | 16 | . 56 2017 | 16 | Amazon | 44 | 16 | . 57 2016 | 2 | Hulu | 20 | 18 | . 58 2017 | 18 | Hulu | 20 | 18 | . 59 rows × 5 columns . Pivot the Data into Wide Format . As we can see above, the dataframe is in long format. That means, each row represents one observation and each column only represent 1 variable or metric. . For the next following steps, i.e. visualization, we need to pivot the dataframe into a wide format. After pivoted, each row in the dataframe represents a single year and each column represents values for one network. . yearly_df = ( df .copy() .pivot(index=&quot;year&quot;, columns=&quot;network&quot;, values=&quot;value&quot;) # remove column index name .rename_axis(None, axis=1) ) yearly_df . ABC AMC Amazon CBS FOX FX Networks HBO Hulu NBC Nat Geo Netflix PBS Showtime . year . 2013 45.0 | 26.0 | NaN | 54.0 | 20.0 | 26.0 | 109.0 | NaN | 53.0 | NaN | 14.0 | 25.0 | 32.0 | . 2014 37.0 | 26.0 | NaN | 47.0 | 21.0 | 45.0 | 99.0 | NaN | 47.0 | 4.0 | 31.0 | 34.0 | 24.0 | . 2015 42.0 | 24.0 | 12.0 | 41.0 | 36.0 | 39.0 | 126.0 | NaN | 43.0 | 4.0 | 34.0 | 30.0 | 18.0 | . 2016 35.0 | 24.0 | 16.0 | 35.0 | 30.0 | 57.0 | 94.0 | 2.0 | 41.0 | 10.0 | 54.0 | 26.0 | 22.0 | . 2017 33.0 | 13.0 | 16.0 | 29.0 | 20.0 | 55.0 | 111.0 | 18.0 | 64.0 | 15.0 | 91.0 | 11.0 | 15.0 | . Those NaN values in the dataframe above mean missing values. . Visualization . Basic Line Plot . First thing first, we will plot the basic line plot with year as the x-axis and network value as the y-axis. There will be multiple lines and each line represent one network. . It is also useful to get the color map from the orginal chart, so that our chart will have similar color pallette. . fig = plt.figure(figsize=(14, 7)) ax = fig.add_subplot() # colormap from the original chart colormap = { &quot;HBO&quot;: &quot;black&quot;, &quot;Netflix&quot;: &quot;#D32F2F&quot;, &quot;NBC&quot;: &quot;#ffc107&quot;, &quot;FX Networks&quot;: &quot;#0097a7&quot;, &quot;ABC&quot;: &quot;#00BFA5&quot;, &quot;CBS&quot;: &quot;#00BCD4&quot;, &quot;FOX&quot;: &quot;#3f51b5&quot;, &quot;Showtime&quot;: &quot;#C5CAE9&quot;, &quot;AMC&quot;: &quot;#D32F2F&quot;, &quot;PBS&quot;: &quot;#B39DDB&quot;, &quot;Amazon&quot;: &quot;#ffc107&quot;, &quot;Nat Geo&quot;: &quot;#ff9800&quot;, &quot;Hulu&quot;: &quot;#00BFA5&quot; } # iterate over unique networks for n in df.network.unique(): if n in (&quot;HBO&quot;, &quot;Netflix&quot;): ax.plot(yearly_df.index, yearly_df[n], color=colormap[n], label=n) else: ax.plot(yearly_df.index, yearly_df[n], color=colormap[n], label=n, linestyle=&quot;:&quot;) . Note that we use two different line styles for the lines. . Solid line for HBO and Netflix, and | Dashed line for the other networks | . Next, we will add the bullet points (scatter plot) on top of the lines . Scatter Plot . We will only apply scatter plot only to Netflix and HBO networks . # only Netflix and HBO that have points ax.scatter(x=yearly_df.index, y=yearly_df.Netflix, s=600, zorder=3, color=colormap[&quot;Netflix&quot;]) ax.scatter(x=yearly_df.index, y=yearly_df.HBO, s=600, zorder=3, color=colormap[&quot;HBO&quot;]) # scatter label for row in yearly_df.itertuples(): ax.text(row.Index, row.Netflix, int(row.Netflix), ha=&quot;center&quot;, va=&quot;center&quot;, color=&quot;#fff&quot;, fontweight=&quot;normal&quot;, fontsize=&quot;medium&quot;) ax.text(row.Index, row.HBO, int(row.HBO), ha=&quot;center&quot;, va=&quot;center&quot;, color=&quot;#fff&quot;, fontweight=&quot;normal&quot;, fontsize=&quot;medium&quot;) fig . It is important to make sure the labels are vertically (va) and horizontally (ha) centered. . Legend . Next we are going to add legend text in the right-hand side of the chart. To make sure that we have enough space to display the texts, we will set the x-axis value range from 2011 to 2018 (+1 year as an extra whitespace to be filled in by the text) . for n in df.network.unique(): if n in (&quot;HBO&quot;, &quot;Netflix&quot;): ax.text(2017.15, yearly_df.loc[2017, n], n.upper(), ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[n], fontweight=&quot;bold&quot;, fontsize=&quot;medium&quot;) else: ax.text(2017.05, yearly_df.loc[2017, n], n.upper(), ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[n], fontweight=&quot;bold&quot;, fontsize=&quot;medium&quot;) # set x axis range ax.set_xlim([2011, 2018]) fig . Grid and Axis . Unlike any other standard charts, the chart has vertical grid lines and the x-axis ticks are written in the middle of the lines. We are going to draw those grid lines and axis texts using vlines and text. . ax.hlines(xmin=yearly_df.index.min(), xmax=yearly_df.index.max(), y=0, color=&quot;lightgray&quot;, zorder=1) # vertical lines ax.vlines(yearly_df.index, ymin=0, ymax=yearly_df.HBO, color=&quot;lightgray&quot;, zorder=1) # x-axis ticks for row in yearly_df.itertuples(): ax.text(row.Index, 75, row.Index, ha=&quot;center&quot;, va=&quot;center&quot;, backgroundcolor=&quot;#fff&quot;, color=&quot;gray&quot;, fontweight=&quot;bold&quot;, bbox={&quot;pad&quot;: 5, &quot;fc&quot;: &quot;#fff&quot;, &quot;ec&quot;: &quot;#fff&quot;}) fig . Title . It is quite tricky to write the title since it has rich formatting (i.e. color, bold, and highlight). . ax.text(2011, 100, &quot;Netflix&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[&quot;Netflix&quot;], fontweight=&quot;bold&quot;, fontsize=30) ax.text(2011, 90, &quot;Challenges&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, fontweight=&quot;light&quot;, fontsize=30) ax.text(2011, 80, &quot;HBO at the&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, fontweight=&quot;light&quot;, fontsize=30) ax.text(2011, 70, &quot;2017 Emmys&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, fontweight=&quot;light&quot;, fontsize=30) fig . Final Version . In the final version, we combine all the parts above into a single block code. . colormap = { &quot;HBO&quot;: &quot;black&quot;, &quot;Netflix&quot;: &quot;#D32F2F&quot;, &quot;NBC&quot;: &quot;#ffc107&quot;, &quot;FX Networks&quot;: &quot;#0097a7&quot;, &quot;ABC&quot;: &quot;#00BFA5&quot;, &quot;CBS&quot;: &quot;#00BCD4&quot;, &quot;FOX&quot;: &quot;#3f51b5&quot;, &quot;Showtime&quot;: &quot;#C5CAE9&quot;, &quot;AMC&quot;: &quot;#D32F2F&quot;, &quot;PBS&quot;: &quot;#B39DDB&quot;, &quot;Amazon&quot;: &quot;#ffc107&quot;, &quot;Nat Geo&quot;: &quot;#ff9800&quot;, &quot;Hulu&quot;: &quot;#00BFA5&quot; } fig = plt.figure(figsize=(14, 7)) ax = fig.add_subplot() # horizontal bottom line ax.hlines(xmin=yearly_df.index.min(), xmax=yearly_df.index.max(), y=0, color=&quot;lightgray&quot;, zorder=1) # vertical lines ax.vlines(yearly_df.index, ymin=0, ymax=yearly_df.HBO, color=&quot;lightgray&quot;, zorder=1) # x-axis ticks for row in yearly_df.itertuples(): ax.text(row.Index, 75, row.Index, ha=&quot;center&quot;, va=&quot;center&quot;, backgroundcolor=&quot;#fff&quot;, color=&quot;gray&quot;, fontweight=&quot;bold&quot;, bbox={&quot;pad&quot;: 5, &quot;fc&quot;: &quot;#fff&quot;, &quot;ec&quot;: &quot;#fff&quot;}) # line plot for n in df.network.unique(): if n in (&quot;HBO&quot;, &quot;Netflix&quot;): ax.plot(yearly_df.index, yearly_df[n], color=colormap[n], label=n) else: ax.plot(yearly_df.index, yearly_df[n], color=colormap[n], label=n, linestyle=&quot;:&quot;) # scatter point # only Netflix and HBO that have points ax.scatter(x=yearly_df.index, y=yearly_df.Netflix, s=600, zorder=3, color=colormap[&quot;Netflix&quot;]) ax.scatter(x=yearly_df.index, y=yearly_df.HBO, s=600, zorder=3, color=colormap[&quot;HBO&quot;]) # scatter label for row in yearly_df.itertuples(): ax.text(row.Index, row.Netflix, int(row.Netflix), ha=&quot;center&quot;, va=&quot;center&quot;, color=&quot;#fff&quot;, fontweight=&quot;normal&quot;, fontsize=&quot;medium&quot;) ax.text(row.Index, row.HBO, int(row.HBO), ha=&quot;center&quot;, va=&quot;center&quot;, color=&quot;#fff&quot;, fontweight=&quot;normal&quot;, fontsize=&quot;medium&quot;) # legend for n in df.network.unique(): if n in (&quot;HBO&quot;, &quot;Netflix&quot;): ax.text(2017.15, yearly_df.loc[2017, n], n.upper(), ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[n], fontweight=&quot;bold&quot;, fontsize=&quot;medium&quot;) else: ax.text(2017.05, yearly_df.loc[2017, n], n.upper(), ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[n], fontweight=&quot;bold&quot;, fontsize=&quot;medium&quot;) # title ax.text(2011, 100, &quot;Netflix&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[&quot;Netflix&quot;], fontweight=&quot;bold&quot;, fontsize=30) ax.text(2011, 90, &quot;Challenges&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, fontweight=&quot;light&quot;, fontsize=30) ax.text(2011, 80, &quot;HBO at the&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, fontweight=&quot;light&quot;, fontsize=30) ax.text(2011, 70, &quot;2017 Emmys&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, fontweight=&quot;light&quot;, fontsize=30) ax.set_xlim([2011, 2018]) ax.set_axis_off() plt.tight_layout() plt.show() . Missing Parts . If you notice, the parts are reordered (e.g. grid lines are first) to make sure their layering stacks. Elements on the upper layers (displayed later) shouldn&#39;t be occluded by any elements on the bottom layers. . The result above is already pretty much similar with the original visualization. However, we still have some missing / uncovered parts: . Font family . I use default font family. As consequences, the font look are not the same as in the original chart. . | Rich title . I found that it is not straight forward to write a rich texh format for chart title . | Avoid text overlap . As you might see on the legend texts (right-hand side) that the text are overlapped each other and unreadable. I haven&#39;t found solution for this issue. . |",
            "url": "https://arifqodari.github.io/blog/2021/08/23/recreate-visualization-in-matplotlib.html",
            "relUrl": "/2021/08/23/recreate-visualization-in-matplotlib.html",
            "date": " • Aug 23, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Currently I am a senior Data Scientist at Ruangguru. Before Ruangguru, I was Data Scientist at Sale Stock Indonesia. I started my professional career as Technical Support at Colorlabs and Company for 1.5 years. Then I move on to Software Engineering at WGS for 2 years. . I graduated with MSc in Artificial Intelligence from University of Amsterdam. My master theses is about real-time 3D Facial Landmark Detection. . I am interested in Artificial Intelligence, especially in the applied Machine Learning to Computer Vision. My complete CV. . Email: {lastname}@fastmail.com .",
          "url": "https://arifqodari.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://arifqodari.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}