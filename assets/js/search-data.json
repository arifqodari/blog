{
  
    
        "post0": {
            "title": "Recreate Visualization in Matplotlib",
            "content": "Last week I watched an interesting video about recreating a D3.js chart using R ggplot. This is the original chart made using D3.js and this is the recreated chart using ggplot. . In this post, basically I&#39;ll go through step by step to recreate the same chart, but using Matplotlib. . Setup . import pandas as pd import matplotlib.pyplot as plt import requests import sys from pprint import pprint plt.style.use(&quot;seaborn-notebook&quot;) pd.options.display.max_rows = 15 . # some utility functions ######################### class Head(object): def __init__(self, lines, fd=sys.stdout): self.lines = lines self.fd = fd def write(self, msg): if self.lines &lt;= 0: return n = msg.count(&quot; n&quot;) if n &lt; self.lines: self.lines -= n return self.fd.write(msg) ix = 0 while(self.lines &gt; 0): iy = msg.find(&#39; n&#39;, ix + 1) self.lines -= 1 ix = iy return self.fd.write(msg[:ix]) def pprint_head(to_print, length=10): pprint(to_print, stream=Head(length)) def glimpse(df, rows=10, info=False): if info: display(df.info()) else: display(df.head(rows)) return df . Dataset . Download the Raw Data . The raw data is in json format and can be downloaded from here . data_url = &quot;https://bl.ocks.org/susielu/raw/625aa4814098671290a8c6bb88a6301e/yearNetwork.json&quot; data_json = requests.get(data_url).json() pprint_head(data_json, 10) # only print first 10 lines . {&#39;networkLines&#39;: [{&#39;line&#39;: [{&#39;value&#39;: 26, &#39;year&#39;: &#39;2013&#39;}, {&#39;value&#39;: 26, &#39;year&#39;: &#39;2014&#39;}, {&#39;value&#39;: 24, &#39;year&#39;: &#39;2015&#39;}, {&#39;value&#39;: 24, &#39;year&#39;: &#39;2016&#39;}, {&#39;value&#39;: 13, &#39;year&#39;: &#39;2017&#39;}], &#39;max&#39;: 26, &#39;network&#39;: &#39;AMC&#39;, &#39;total&#39;: 113}, {&#39;line&#39;: [{&#39;value&#39;: 32, &#39;year&#39;: &#39;2013&#39;}, {&#39;value&#39;: 24, &#39;year&#39;: &#39;2014&#39;}, . Convert json into DataFrame . To make our life easier, we will convert the json data into DataFrame. Once it is a DataFrame, it will be easier to modify and transform the data. . df = ( # convert json into tabular pd.json_normalize(data_json[&quot;networkLines&quot;], &quot;line&quot;, [&quot;network&quot;, &quot;total&quot;, &quot;max&quot;]) .pipe(glimpse, info=True) # specify data type for numeric variables .astype({&quot;year&quot;: &quot;int&quot;, &quot;value&quot;: &quot;int&quot;, &quot;total&quot;: &quot;int&quot;, &quot;max&quot;: &quot;int&quot;}) ) df . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 59 entries, 0 to 58 Data columns (total 5 columns): # Column Non-Null Count Dtype -- -- 0 year 59 non-null object 1 value 59 non-null int64 2 network 59 non-null object 3 total 59 non-null object 4 max 59 non-null object dtypes: int64(1), object(4) memory usage: 2.4+ KB . None . year value network total max . 0 2013 | 26 | AMC | 113 | 26 | . 1 2014 | 26 | AMC | 113 | 26 | . 2 2015 | 24 | AMC | 113 | 26 | . 3 2016 | 24 | AMC | 113 | 26 | . 4 2017 | 13 | AMC | 113 | 26 | . ... ... | ... | ... | ... | ... | . 54 2015 | 12 | Amazon | 44 | 16 | . 55 2016 | 16 | Amazon | 44 | 16 | . 56 2017 | 16 | Amazon | 44 | 16 | . 57 2016 | 2 | Hulu | 20 | 18 | . 58 2017 | 18 | Hulu | 20 | 18 | . 59 rows × 5 columns . Pivot the Data into Wide Format . The dataframe above is in long format. It can be noticed that each row represents one observation and each column only represent 1 variable / metric. . However, for visualization purpose, we will pivot the data into a wide format. For each row in the DataFrame, it will represent observations in a single year. . yearly_df = ( df .copy() .pivot(columns=&quot;network&quot;, values=&quot;value&quot;, index=&quot;year&quot;) ) yearly_df . network ABC AMC Amazon CBS FOX FX Networks HBO Hulu NBC Nat Geo Netflix PBS Showtime . year . 2013 45.0 | 26.0 | NaN | 54.0 | 20.0 | 26.0 | 109.0 | NaN | 53.0 | NaN | 14.0 | 25.0 | 32.0 | . 2014 37.0 | 26.0 | NaN | 47.0 | 21.0 | 45.0 | 99.0 | NaN | 47.0 | 4.0 | 31.0 | 34.0 | 24.0 | . 2015 42.0 | 24.0 | 12.0 | 41.0 | 36.0 | 39.0 | 126.0 | NaN | 43.0 | 4.0 | 34.0 | 30.0 | 18.0 | . 2016 35.0 | 24.0 | 16.0 | 35.0 | 30.0 | 57.0 | 94.0 | 2.0 | 41.0 | 10.0 | 54.0 | 26.0 | 22.0 | . 2017 33.0 | 13.0 | 16.0 | 29.0 | 20.0 | 55.0 | 111.0 | 18.0 | 64.0 | 15.0 | 91.0 | 11.0 | 15.0 | . Visualization . Basic Line Plot . fig = plt.figure(figsize=(14, 7)) ax = fig.add_subplot() # colormap colormap = { &quot;HBO&quot;: &quot;black&quot;, &quot;Netflix&quot;: &quot;#D32F2F&quot;, &quot;NBC&quot;: &quot;#ffc107&quot;, &quot;FX Networks&quot;: &quot;#0097a7&quot;, &quot;ABC&quot;: &quot;#00BFA5&quot;, &quot;CBS&quot;: &quot;#00BCD4&quot;, &quot;FOX&quot;: &quot;#3f51b5&quot;, &quot;Showtime&quot;: &quot;#C5CAE9&quot;, &quot;AMC&quot;: &quot;#D32F2F&quot;, &quot;PBS&quot;: &quot;#B39DDB&quot;, &quot;Amazon&quot;: &quot;#ffc107&quot;, &quot;Nat Geo&quot;: &quot;#ff9800&quot;, &quot;Hulu&quot;: &quot;#00BFA5&quot; } # line plot for c in yearly_df.columns: if c in (&quot;HBO&quot;, &quot;Netflix&quot;): ax.plot(yearly_df.index, yearly_df[c], color=colormap[c], label=c) else: ax.plot(yearly_df.index, yearly_df[c], color=colormap[c], label=c, linestyle=&quot;:&quot;) . Scatter Plot . # only Netflix and HBO that have points yearly_df.reset_index().plot.scatter(x=&quot;year&quot;, y=&quot;Netflix&quot;, s=600, ax=ax, zorder=3, color=colormap[&quot;Netflix&quot;]) yearly_df.reset_index().plot.scatter(x=&quot;year&quot;, y=&quot;HBO&quot;, s=600, ax=ax, zorder=3, color=colormap[&quot;HBO&quot;]) # scatter label for row in yearly_df.itertuples(): # only Netflix and HBO that have text labels ax.text(row.Index, row.Netflix, int(row.Netflix), ha=&quot;center&quot;, va=&quot;center&quot;, color=&quot;#fff&quot;, weight=&quot;normal&quot;, size=&quot;medium&quot;) ax.text(row.Index, row.HBO, int(row.HBO), ha=&quot;center&quot;, va=&quot;center&quot;, color=&quot;#fff&quot;, weight=&quot;normal&quot;, size=&quot;medium&quot;) fig . Legend . offset = 0 for c in yearly_df.columns: if c in (&quot;HBO&quot;, &quot;Netflix&quot;): ax.text(2017.15, yearly_df.loc[2017, c], c.upper(), ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[c], weight=&quot;bold&quot;, size=&quot;medium&quot;) else: ax.text(2017.05, yearly_df.loc[2017, c], c.upper(), ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[c], linespacing=9, weight=&quot;bold&quot;, size=&quot;medium&quot;) ax.set_xlim([2011, 2018]) fig . Grid and Axis . ax.hlines(xmin=yearly_df.index.min(), xmax=yearly_df.index.max(), y=0, color=&quot;lightgray&quot;, zorder=1) # vertical lines ax.vlines(yearly_df.index, ymin=0, ymax=yearly_df.HBO, color=&quot;lightgray&quot;, zorder=1) # vertical lines label for row in yearly_df.itertuples(): ax.text(row.Index, 75, row.Index, ha=&quot;center&quot;, va=&quot;center&quot;, backgroundcolor=&quot;#fff&quot;, color=&quot;gray&quot;, weight=&quot;bold&quot;, bbox={&quot;pad&quot;: 5, &quot;fc&quot;: &quot;#fff&quot;, &quot;ec&quot;: &quot;#fff&quot;}) fig . Title . ax.text(2011, 100, &quot;Netflix&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[&quot;Netflix&quot;], weight=&quot;bold&quot;, size=30) ax.text(2011, 90, &quot;Challenges&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, weight=&quot;light&quot;, size=30) ax.text(2011, 80, &quot;HBO at the&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, weight=&quot;light&quot;, size=30) ax.text(2011, 70, &quot;2017 Emmys&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, weight=&quot;light&quot;, size=30) fig . Final Version . colormap = { &quot;HBO&quot;: &quot;black&quot;, &quot;Netflix&quot;: &quot;#D32F2F&quot;, &quot;NBC&quot;: &quot;#ffc107&quot;, &quot;FX Networks&quot;: &quot;#0097a7&quot;, &quot;ABC&quot;: &quot;#00BFA5&quot;, &quot;CBS&quot;: &quot;#00BCD4&quot;, &quot;FOX&quot;: &quot;#3f51b5&quot;, &quot;Showtime&quot;: &quot;#C5CAE9&quot;, &quot;AMC&quot;: &quot;#D32F2F&quot;, &quot;PBS&quot;: &quot;#B39DDB&quot;, &quot;Amazon&quot;: &quot;#ffc107&quot;, &quot;Nat Geo&quot;: &quot;#ff9800&quot;, &quot;Hulu&quot;: &quot;#00BFA5&quot; } fig = plt.figure(figsize=(14, 7)) ax = fig.add_subplot() # horizontal bottom line ax.hlines(xmin=yearly_df.index.min(), xmax=yearly_df.index.max(), y=0, color=&quot;lightgray&quot;, zorder=1) # vertical lines ax.vlines(yearly_df.index, ymin=0, ymax=yearly_df.HBO, color=&quot;lightgray&quot;, zorder=1) # vertical lines label for row in yearly_df.itertuples(): ax.text(row.Index, 75, row.Index, ha=&quot;center&quot;, va=&quot;center&quot;, backgroundcolor=&quot;#fff&quot;, color=&quot;gray&quot;, weight=&quot;bold&quot;, bbox={&quot;pad&quot;: 5, &quot;fc&quot;: &quot;#fff&quot;, &quot;ec&quot;: &quot;#fff&quot;}) # line plot for c in yearly_df.columns: if c in (&quot;HBO&quot;, &quot;Netflix&quot;): ax.plot(yearly_df.index, yearly_df[c], color=colormap[c], label=c) else: ax.plot(yearly_df.index, yearly_df[c], color=colormap[c], label=c, linestyle=&quot;:&quot;) # scatter yearly_df.reset_index().plot.scatter(x=&quot;year&quot;, y=&quot;Netflix&quot;, s=600, ax=ax, zorder=3, color=colormap[&quot;Netflix&quot;]) yearly_df.reset_index().plot.scatter(x=&quot;year&quot;, y=&quot;HBO&quot;, s=600, ax=ax, zorder=3, color=colormap[&quot;HBO&quot;]) # scatter label for row in yearly_df.itertuples(): ax.text(row.Index, row.Netflix, int(row.Netflix), ha=&quot;center&quot;, va=&quot;center&quot;, color=&quot;#fff&quot;, weight=&quot;normal&quot;, size=&quot;medium&quot;) ax.text(row.Index, row.HBO, int(row.HBO), ha=&quot;center&quot;, va=&quot;center&quot;, color=&quot;#fff&quot;, weight=&quot;normal&quot;, size=&quot;medium&quot;) # label offset = 0 for c in yearly_df.columns: if c in (&quot;HBO&quot;, &quot;Netflix&quot;): ax.text(2017.15, yearly_df.loc[2017, c], c.upper(), ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[c], weight=&quot;bold&quot;, size=&quot;medium&quot;) else: ax.text(2017.05, yearly_df.loc[2017, c], c.upper(), ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[c], linespacing=9, weight=&quot;bold&quot;, size=&quot;medium&quot;) # title ax.text(2011, 100, &quot;Netflix&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, color=colormap[&quot;Netflix&quot;], weight=&quot;bold&quot;, size=30) ax.text(2011, 90, &quot;Challenges&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, weight=&quot;light&quot;, size=30) ax.text(2011, 80, &quot;HBO at the&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, weight=&quot;light&quot;, size=30) ax.text(2011, 70, &quot;2017 Emmys&quot;, ha=&quot;left&quot;, va=&quot;center&quot;, weight=&quot;light&quot;, size=30) ax.set_xlim([2011, 2018]) ax.set_axis_off() plt.tight_layout() plt.show() . Missing Parts . The result above is already pretty much similar with the original visualization. However, we still have some missing / uncovered parts: . Font family . The font family I used are not the same as in the original . | Rich title . I found it is not straight forward to write a rich texh format for chart title . | Avoid text overlap . As you might see on the legend texts (right-hand side) that the text are overlapped each other and unreadable. . |",
            "url": "https://arifqodari.github.io/blog/2021/08/23/recreate-visualization-in-matplotlib.html",
            "relUrl": "/2021/08/23/recreate-visualization-in-matplotlib.html",
            "date": " • Aug 23, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Currently I am a senior Data Scientist at Ruangguru. Before Ruangguru, I was Data Scientist at Sale Stock Indonesia. I started my professional career as Technical Support at Colorlabs and Company for 1.5 years. Then I move on to Software Engineering at WGS for 2 years. . I graduated with MSc in Artificial Intelligence from University of Amsterdam. My master theses is about real-time 3D Facial Landmark Detection. . I am interested in Artificial Intelligence, especially in the applied Machine Learning to Computer Vision. My complete CV. . Email: {lastname}@fastmail.com .",
          "url": "https://arifqodari.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://arifqodari.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}